
R version 3.0.1 Patched (2013-08-16 r63595) -- "Good Sport"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### suppressPackageStartupMessages(...)  as we have an *.Rout.save to Rdiff against
> stopifnot(suppressPackageStartupMessages(require(lme4)))
> options(show.signif.stars = FALSE)
> 
> source(system.file("test-tools.R", package = "Matrix"))# identical3() etc
> all.EQ <- function(u,v, ...) all.equal.X(u, v, except = c("call", "frame"), ...)
> S4_2list <- function(obj) {   # no longer used
+    sn <- slotNames(obj)
+    structure(lapply(sn, slot, object = obj), .Names = sn)
+ }
> ## Is now (2010-09-03) in Matrix' test-tools.R above
> ## showProc.time <- local({
> ##     pct <- proc.time()
> ##     function() { ## CPU elapsed __since last called__
> ## 	ot <- pct ; pct <<- proc.time()
> ## 	cat('Time elapsed: ', (pct - ot)[1:3],'\n')
> ##     }
> ## })
> 
> (fm1 <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy))
Linear mixed model fit by REML ['lmerMod']
Formula: Reaction ~ Days + (Days | Subject) 
   Data: sleepstudy 
REML criterion at convergence: 1743.628 
Random effects:
 Groups   Name        Std.Dev. Corr
 Subject  (Intercept) 24.741       
          Days         5.922   0.07
 Residual             25.592       
Number of obs: 180, groups: Subject, 18
Fixed Effects:
(Intercept)         Days  
     251.41        10.47  
> (fm1a <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy, REML = FALSE))
Linear mixed model fit by maximum likelihood ['lmerMod']
Formula: Reaction ~ Days + (Days | Subject) 
   Data: sleepstudy 
      AIC       BIC    logLik  deviance 
1763.9393 1783.0971 -875.9697 1751.9393 
Random effects:
 Groups   Name        Std.Dev. Corr
 Subject  (Intercept) 23.781       
          Days         5.717   0.08
 Residual             25.592       
Number of obs: 180, groups: Subject, 18
Fixed Effects:
(Intercept)         Days  
     251.41        10.47  
> (fm2 <- lmer(Reaction ~ Days + (1|Subject) + (0+Days|Subject), sleepstudy))
Linear mixed model fit by REML ['lmerMod']
Formula: Reaction ~ Days + (1 | Subject) + (0 + Days | Subject) 
   Data: sleepstudy 
REML criterion at convergence: 1743.669 
Random effects:
 Groups    Name        Std.Dev.
 Subject   (Intercept) 25.052  
 Subject.1 Days         5.988  
 Residual              25.565  
Number of obs: 180, groups: Subject, 18
Fixed Effects:
(Intercept)         Days  
     251.41        10.47  
> anova(fm1, fm2)
Data: sleepstudy
Models:
fm2: Reaction ~ Days + (1 | Subject) + (0 + Days | Subject)
fm1: Reaction ~ Days + (Days | Subject)
    Df    AIC    BIC  logLik deviance  Chisq Chi Df Pr(>Chisq)
fm2  5 1762.0 1778.0 -876.00   1752.0                         
fm1  6 1763.9 1783.1 -875.97   1751.9 0.0639      1     0.8004
> 
> ## Now works for glmer
> fm1. <- suppressWarnings(glmer(Reaction ~ Days + (Days|Subject), sleepstudy))
> ## default family=gaussian/identity link -> automatically calls  lmer()  (but with a warning)
> ## hack call -- comes out unimportantly different
> fm1.@call[[1]] <- quote(lmer)
> stopifnot(all.equal(fm1, fm1.))
> ## Test against previous version in lmer1 (using bobyqa for consistency)
> #(fm1. <- lmer1(Reaction ~ Days + (Days|Subject), sleepstudy, opt = "bobyqa"))
> #stopifnot(all.equal(fm1@devcomp$cmp['REML'], fm1.@devcomp$cmp['REML']),
> #          all.equal(fixef(fm1), fixef(fm1.)),
> #          all.equal(fm1@re@theta, fm1.@theta, tol = 1.e-7),
> #          all.equal(ranef(fm1), ranef(fm1.)))
> 
> ## compDev = FALSE no longer applies to lmer
> ## Test 'compDev = FALSE' (vs TRUE)
> ## fm1. <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy,
> ##              compDev = FALSE)#--> use R code (not C++) for deviance computation
> ## stopifnot(all.equal(fm1@devcomp$cmp['REML'], fm1.@devcomp$cmp['REML']),
> ##           all.equal(fixef(fm1), fixef(fm1.)),
> ##           all.equal(fm1@re@theta, fm1.@re@theta, tol = 1.e-7),
> ##           all.equal(ranef(fm1), ranef(fm1.), tol = 1.e-7))
> 
> stopifnot(all.equal(fixef(fm1), fixef(fm2), tol = 1.e-13),
+           all.equal(unname(fixef(fm1)),
+                     c(251.405104848485, 10.467285959595), tol = 1e-13),
+ 	  all.equal(Matrix::cov2cor(vcov(fm1))["(Intercept)", "Days"],
+ 		    -0.13755, tol=1e-4))
> 
> fm1ML <- refitML(fm1)
> fm2ML <- refitML(fm2)
> print(AIC(fm1ML)); print(AIC(fm2ML))
[1] 1763.939
[1] 1762.003
> print(BIC(fm1ML)); print(BIC(fm2ML))
[1] 1783.097
[1] 1777.968
> 
> (fm3 <- lmer(Yield ~ 1|Batch, Dyestuff2))
Linear mixed model fit by REML ['lmerMod']
Formula: Yield ~ 1 | Batch 
   Data: Dyestuff2 
REML criterion at convergence: 161.8283 
Random effects:
 Groups   Name        Std.Dev.
 Batch    (Intercept) 0.000   
 Residual             3.716   
Number of obs: 30, groups: Batch, 6
Fixed Effects:
(Intercept)  
      5.666  
> stopifnot(all.equal(coef(summary(fm3)),
+ 		    array(c(5.6656, 0.67838803150, 8.3515624346),
+ 			  c(1,3), dimnames = list("(Intercept)",
+ 				  c("Estimate", "Std. Error", "t value")))))
> showProc.time() #
Time elapsed:  0.98 0.012 0.995 
> 
> ### {from ../man/lmer.Rd } --- compare lmer & lmer1 ---------------
> (fmX1 <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy))
Linear mixed model fit by REML ['lmerMod']
Formula: Reaction ~ Days + (Days | Subject) 
   Data: sleepstudy 
REML criterion at convergence: 1743.628 
Random effects:
 Groups   Name        Std.Dev. Corr
 Subject  (Intercept) 24.741       
          Days         5.922   0.07
 Residual             25.592       
Number of obs: 180, groups: Subject, 18
Fixed Effects:
(Intercept)         Days  
     251.41        10.47  
> (fm.1 <- lmer(Reaction ~ Days + (1|Subject) + (0+Days|Subject), sleepstudy))
Linear mixed model fit by REML ['lmerMod']
Formula: Reaction ~ Days + (1 | Subject) + (0 + Days | Subject) 
   Data: sleepstudy 
REML criterion at convergence: 1743.669 
Random effects:
 Groups    Name        Std.Dev.
 Subject   (Intercept) 25.052  
 Subject.1 Days         5.988  
 Residual              25.565  
Number of obs: 180, groups: Subject, 18
Fixed Effects:
(Intercept)         Days  
     251.41        10.47  
> 
> #(fmX2 <- lmer2(Reaction ~ Days + (Days|Subject), sleepstudy))
> #(fm.2 <- lmer2(Reaction ~ Days + (1|Subject) + (0+Days|Subject), sleepstudy))
> ## check update(<mer>, <formula>):
> fm.3 <- update(fmX1, . ~ Days + (1|Subject) + (0+Days|Subject))
> stopifnot(all.equal(fm.1, fm.3))
> 
> fmX1s <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy, sparseX=TRUE)
Warning messages:
1: In checkArgs("lmer", sparseX = TRUE) :
  sparseX = TRUE has no effect at present
2: In checkArgs("lmer", sparseX = TRUE) :
  extra argument(s) 'sparseX' disregarded
> #fmX2s <- lmer2(Reaction ~ Days + (Days|Subject), sleepstudy, sparseX=TRUE)
> 
> showProc.time() #
Time elapsed:  0.428 0 0.427 
> 
> for(nm in c("coef", "fixef", "ranef", "sigma",
+ 	     "model.matrix", "model.frame" , "terms")) {
+     cat(sprintf("%15s : ", nm))
+     FUN <- get(nm)
+     F.fmX1s <- FUN(fmX1s)
+ #    F.fmX2s <- FUN(fmX2s)
+ #    if(nm == "model.matrix") {
+ #        F.fmX1s <- as(F.fmX1s, "denseMatrix")
+ #        F.fmX2s <- as(F.fmX2s, "denseMatrix")
+ #	FF <- function(.) {r <- FUN(.); row.names(r) <- NULL
+ #			   as(r, "generalMatrix") }
+ #    } # else
+     FF <- FUN
+     stopifnot(
+ 	      all.equal( FF(fmX1), F.fmX1s, tol =  1e-6)
+ #	      ,
+ #	      all.equal( FF(fmX2), F.fmX2s, tol = 1e-5)
+ #              ,
+ #	      all.equal( FF(fm.1), F.fmX2s, tol = 9e-6) ## these are different models
+ #              ,
+ #              all.equal(F.fmX2s,   F.fmX1s, tol = 6e-6)
+ #              ,
+ #              all.equal(FUN(fm.1), FUN(fm.2), tol = 6e-6)
+               ,
+               TRUE)
+     cat("[Ok]\n")
+ }
           coef : [Ok]
          fixef : [Ok]
          ranef : [Ok]
          sigma : [Ok]
   model.matrix : [Ok]
    model.frame : [Ok]
          terms : [Ok]
> 
> 
> ## transformed vars should work[even if non-sensical as here;failed in 0.995-1]
> fm2l <- lmer(log(Reaction) ~ log(Days+1) + (log(Days+1)|Subject),
+              data = sleepstudy, REML = FALSE)
> ## no need for an expand method now : xfm2 <- expand(fm2)
> 
> stopifnot(dim(ranef(fm2l)[[1]]) == c(18, 2),
+           is((c3 <- coef(fm3)), "coef.mer"),
+           all(fixef(fm3) == c3$Batch),## <-- IFF  \hat{\sigma^2} == 0
+           TRUE)
> 
> 
> 
> ## Simple example by Andrew Gelman (2006-01-10) ----
> n.groups <- 10 ; n.reps <- 2
> n <- length(group.id <- gl(n.groups, n.reps))
> ## simulate the varying parameters and the data:
> set.seed(0)
> a.group <- rnorm(n.groups, 1, 2)
> y <- rnorm (n, a.group[group.id], 1)
> ## fit and summarize the model
> fit.1 <- lmer (y ~ 1 + (1 | group.id))
> coef (fit.1)
$group.id
   (Intercept)
1    3.3760010
2   -0.2384543
3    3.1859572
4    3.1121389
5    1.4381126
6   -1.7593534
7   -0.2546156
8    0.6977977
9    1.2121810
10   4.9433563

attr(,"class")
[1] "coef.mer"
> ## check show( <"summary.mer"> ):
> (sf1 <- summary(fit.1)) # --> now looks as for fit.1
Linear mixed model fit by REML ['lmerMod']
Formula: y ~ 1 + (1 | group.id) 

REML criterion at convergence: 73.4034 

Random effects:
 Groups   Name        Variance Std.Dev.
 group.id (Intercept) 4.5579   2.1349  
 Residual             0.6678   0.8172  
Number of obs: 20, groups: group.id, 10

Fixed effects:
            Estimate Std. Error t value
(Intercept)   1.5713     0.6994   2.247
> 
> stopifnot(all.equal(fixef(fit.1), c("(Intercept)" = 1.571312129)),
+ 	  all.equal(unname(ranef(fit.1, drop=TRUE)[["group.id"]]),
+ 		   c(1.8046888, -1.8097665, 1.6146451, 1.5408268, -0.1331995,
+                      -3.3306655, -1.8259277, -0.8735145, -0.3591311,  3.3720441),
+ 		    tol = 1e-5)
+ 	  )
> 
> 
> ## ranef and coef
> rr <- ranef(fm1)
> stopifnot(is.list(rr), length(rr) == 1, class(rr[[1]]) == "data.frame")
> print(plot(rr))
$Subject

> stopifnot(is(cc <- coef(fm1), "coef.mer"),
+ 	  is.list(cc), length(cc) == 1, class(cc[[1]]) == "data.frame")
> print(plot(cc))
$Subject

> rr <- ranef(fm2)
> stopifnot(is.list(rr), length(rr) == 1, class(rr[[1]]) == "data.frame")
> print(plot(rr))
$Subject

> stopifnot(is(cc <- coef(fm2), "coef.mer"),
+ 	  is.list(cc), length(cc) == 1, class(cc[[1]]) == "data.frame")
> print(plot(cc))
$Subject

> 
> showProc.time() #
Time elapsed:  0.768 0.004 0.777 
> 
> ## Invalid factor specification -- used to seg.fault:
> set.seed(1)
> dat <- within(data.frame(lagoon = factor(rep(1:4,each = 25)),
+                          habitat = factor(rep(1:20, each = 5))),
+           {
+               y <- round(10*rnorm(100, m = 10*as.numeric(lagoon)))
+           })
> 
> try(reg <- lmer(y ~ habitat + (1|habitat*lagoon), data = dat) # did seg.fault
+     ) # now gives error                 ^- should be ":"
Error in FUN(X[[1L]], ...) : 
  Invalid grouping factor specification, habitat * lagoon
In addition: Warning message:
In Ops.factor(habitat, lagoon) : * not meaningful for factors
> r1  <- lmer(y ~ 0+habitat + (1|habitat:lagoon), data = dat) # ok, but senseless
> r1b <- lmer(y ~ 0+habitat + (1|habitat), data = dat) # same model, clearly indeterminable
> ## "TODO" :  summary(r1)  should ideally warn the user
> stopifnot(all.equal(fixef(r1), fixef(r1b), tol= 1e-15),
+           all.equal(ranef(r1), ranef(r1b), tol= 1e-15, check.attributes=FALSE))
> 
> ## Use a more sensible model:
> r2.0 <- lmer(y ~ 0+lagoon + (1|habitat:lagoon), data = dat) # ok
> r2   <- lmer(y ~ 0+lagoon + (1|habitat), data = dat) # ok, and more clear
> stopifnot(all.equal(fixef(r2), fixef(r2.0), tol= 1e-15),
+           all.equal(ranef(r2), ranef(r2.0), tol= 1e-15, check.attributes=FALSE))
> V2 <- vcov(r2)
> assert.EQ.mat(V2, diag(x = 9.9833/3, nr = 4))
> stopifnot(all.equal(unname(fixef(r2)) - (1:4)*100,
+ 		    c(1.72, 0.28, 1.76, 0.8), tol = 1e-13))
> 
> ## sparseX version should give same numbers:
> r2.  <- lmer(y ~ 0+lagoon + (1|habitat), data = dat,
+              sparseX = TRUE, verbose = TRUE)
Warning messages:
1: In checkArgs("lmer", sparseX = TRUE) :
  sparseX = TRUE has no effect at present
2: In checkArgs("lmer", sparseX = TRUE) :
  extra argument(s) 'sparseX' disregarded
> 
> ## the summary() components we do want to compare 'dense X' vs 'sparse X':
> nmsSumm <- c("methTitle", "devcomp", "logLik", "ngrps", "coefficients",
+              "sigma", "REmat", "AICtab")
> sr2  <- summary(r2)
> sr2. <- summary(r2.)
> sr2.$devcomp$dims['spFe'] <- 0L       # to allow for comparisons below
> stopifnot(all.equal(sr2[nmsSumm], sr2.[nmsSumm], tol= 1e-14)
+           , all.equal(ranef(r2), ranef(r2.), tol= 1e-14)
+           , Matrix:::isDiagonal(vcov(r2.)) # ok
+           , all.equal(Matrix::diag(vcov(r2.)), rep.int(V2[1,1], 4), tol= 1e-13)
+ #          , all(vcov(r2.)@factors$correlation == diag(4))  # not sure why this fails
+           , TRUE)
> r2.
Linear mixed model fit by REML ['lmerMod']
Formula: y ~ 0 + lagoon + (1 | habitat) 
   Data: dat 
REML criterion at convergence: 709.7447 
Random effects:
 Groups   Name        Std.Dev.
 habitat  (Intercept) 0.000   
 Residual             9.121   
Number of obs: 100, groups: habitat, 20
Fixed Effects:
lagoon1  lagoon2  lagoon3  lagoon4  
  101.7    200.3    301.8    400.8  
> 
> 
> ### mcmcsamp() :
> ## From: Andrew Gelman <gelman@stat.columbia.edu>
> ## Date: Wed, 18 Jan 2006 22:00:53 -0500
> 
> if (FALSE) {  # mcmcsamp still needs work
+     ## NB: Need to restore coda to the Suggests: field of DESCRIPTION
+     ## file if this code block is reinstated.
+     ## has.coda <- require(coda)
+     ## if(!has.coda)
+     ##     cat("'coda' package not available; some outputs will look suboptimal\n")
+ 
+     ## Very simple example
+     y <- 1:10
+     group <- gl(2,5)
+     (M1 <- lmer (y ~ 1 + (1 | group))) # works fine
+     (r1 <- mcmcsamp (M1))              # dito
+     r2 <- mcmcsamp (M1, saveb = TRUE)  # gave error in 0.99-* and 0.995-[12]
+     (r10 <- mcmcsamp (M1, n = 10, saveb = TRUE))
+ 
+     ## another one, still simple
+     y <- (1:20)*pi
+     x <- (1:20)^2
+     group <- gl(2,10)
+     M1 <- lmer (y ~ 1 | group)
+     mcmcsamp (M1, n = 2, saveb=TRUE) # fine
+ 
+     M2 <- lmer (y ~ 1 + x + (1 + x | group)) # false convergence
+     ## should be identical (and is)
+     M2 <- lmer (y ~ x + ( x | group))#  false convergence -> simulation doesn't work:
+     if(FALSE) ## try(..) fails here (in R CMD check) [[why ??]]
+         mcmcsamp (M2, saveb=TRUE)
+     ## Error: inconsistent degrees of freedom and dimension ...
+ 
+     ## mcmc for glmer:
+     rG1k <- mcmcsamp(m1, n = 1000)
+     summary(rG1k)
+     rG2 <- mcmcsamp(m1, n = 3, verbose = TRUE)
+ }
> 
> ## Spencer Graves' example (from a post to S-news, 2006-08-03) ----------------
> ## it should give an error, rather than silent non-sense:
> tstDF <- data.frame(group = letters[1:5], y = 1:5)
> assertError(## Now throws an error, as desired :
+             lmer(y ~ 1 + (1|group), data = tstDF)
+             )
> 
> showProc.time() #
Time elapsed:  0.592 0.004 0.596 
> 
> ## Wrong formula gave a seg.fault at times:
> set.seed(2)# !
> D <-  data.frame(y= rnorm(12,10), ff = gl(3,2,12),
+                  x1=round(rnorm(12,3),1), x2=round(rnorm(12,7),1))
> ## NB: The first two are the same, having a length-3 R.E. with 3 x 3 vcov-matrix:
> ## --> do need CPU
> ## suppressWarnings() for warning about too-few random effects levels
> m0 <- suppressWarnings(lmer(y ~ (x1 + x2)|ff, data = D))
> m1 <- suppressWarnings(lmer(y ~ x1 + x2|ff  , data = D))
> m2 <- suppressWarnings(lmer(y ~ x1 + (x2|ff), data = D))
> m3 <- suppressWarnings(lmer(y ~ (x2|ff) + x1, data = D))
> stopifnot(all.equal(ranef(m0), ranef(m1)),
+           all.equal(ranef(m2), ranef(m3)),
+           inherits(tryCatch(lmer(y ~ x2|ff + x1, data = D), error = function(e)e),
+                    "error"))
Warning message:
In Ops.factor(ff, x1) : + not meaningful for factors
> 
> showProc.time() #
Time elapsed:  1.512 0.004 1.526 
> 
> ## Reordering of grouping factors should not change the internal structure
> #Pm1  <- lmer1(strength ~ (1|batch) + (1|sample), Pastes, doFit = FALSE)
> #Pm2  <- lmer1(strength ~ (1|sample) + (1|batch), Pastes, doFit = FALSE)
> #P2.1 <- lmer (strength ~ (1|batch) + (1|sample), Pastes, devFunOnly = TRUE)
> #P2.2 <- lmer (strength ~ (1|sample) + (1|batch), Pastes, devFunOnly = TRUE)
> 
> ## The environments of Pm1 and Pm2 should be identical except for
> ## "call" and "frame":
> #stopifnot(## all.EQ(env(Pm1), env(Pm2)),
> #	  all.EQ(S4_2list(P2.1),
> #		 S4_2list(P2.2)))
> 
> 
> ## example from Kevin Thorpe: synthesized equivalent
> ## http://thread.gmane.org/gmane.comp.lang.r.lme4.devel/9835
> 
> ## NA issue: simpler example
> d <- data.frame(y=1:60,f=factor(rep(1:6,each=10)))
> d$y[2] <- NA
> d$f[3:4] <- NA
> lmer(y~(1|f),data=d)
Linear mixed model fit by REML ['lmerMod']
Formula: y ~ (1 | f) 
   Data: d 
REML criterion at convergence: 316.1615 
Random effects:
 Groups   Name        Std.Dev.
 f        (Intercept) 18.395  
 Residual              3.024  
Number of obs: 57, groups: f, 6
Fixed Effects:
(Intercept)  
      30.68  
> glmer(y~(1|f),data=d,family=poisson)
Generalized linear mixed model fit by maximum likelihood ['glmerMod']
 Family: poisson ( log )
Formula: y ~ (1 | f) 
   Data: d 
      AIC       BIC    logLik  deviance 
 354.3560  358.4421 -175.1780  350.3560 
Random effects:
 Groups Name        Std.Dev.
 f      (Intercept) 0.7115  
Number of obs: 57, groups: f, 6
Fixed Effects:
(Intercept)  
      3.217  
> 
> ## we originally thought that these examples should be
> ## estimating non-zero variances, but they shouldn't ...
> ## number of levels with each level of replication
> levs <- c(800,300,150,100,50,50,50,20,20,5,2,2,2,2)
> n <- seq_along(levs)
> flevels <- seq(sum(levs))
> set.seed(101)
> fakedat <- data.frame(DA = factor(rep(flevels,rep(n,levs))),
+                       zbmi=rnorm(sum(n*levs)))
> ## add NA values
> fakedat[sample(nrow(fakedat),100),"zbmi"] <- NA
> fakedat[sample(nrow(fakedat),100),"DA"] <- NA
> 
> m5 <- lmer(zbmi ~ (1|DA) , data = fakedat,
+ 	   control=lmerControl(check.nobs.vs.rankZ="ignore"))
> m6 <- update(m5, data=na.omit(fakedat))
> stopifnot(VarCorr(m5)[["DA"]] == 0,
+ 	  VarCorr(m6)[["DA"]] == 0)
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
  8.904   0.088   9.022 
