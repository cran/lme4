
R Under development (unstable) (2013-08-22 r63654) -- "Unsuffered Consequences"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: i686-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> if(require("testthat", quietly = TRUE)) {
+     pkg   <- "lme4"
+     require(pkg, character.only=TRUE, quietly=TRUE)
+     test_package(pkg)
+ } else {
+     print( "package 'testthat' not available, cannot run unit tests" )
+ }
testing bounds : 
storing warnings, convergence status, etc. : 12
factor handling in grouping variables : ...
data= argument and formula evaluation : ......................................
fitting glmer models : ..................3...............
glmFamily linkInv and muEta : ................................................................
glmFamily linkFun and variance : ........................................................
glmFamily devResid and aic : ........................
negative binomial : ...........
Errors and warnings from glmer : ........
fitting lmer models : .......4...............56.....7.89
lmerResp objects : ..........
glmResp objects : ................
anova : ..
atesting fixed-effect design matrices for full rank : ......b
residuals : .................
specifying starting values : cd
.

1. Failure: storewarning -------------------------------------------------------
gm1 <- glmer(cbind(incidence, size - incidence) ~ period + (1 | herd), data = cbpp, family = binomial, control = glmerControl(optimizer = "Nelder_Mead", maxfun = 3)) no warnings given

2. Error: storewarning ---------------------------------------------------------
object 'gm1' not found
1: expect_equal(gm1@optinfo$warnings[[1]], "failure to converge in 3 evaluations")
2: expect_that(object, equals(expected, label = expected.label, ...), info = info, label = label)
3: condition(object)
4: all.equal(expected, actual, ...)
5: all.equal.character(expected, actual, ...)
6: attr.all.equal(target, current, ...)
7: mode(current)
8: .handleSimpleError(function (e) 
   {
    e$calls <- head(sys.calls()[-seq_len(frame + 7)], -2)
    signalCondition(e)
}, "object 'gm1' not found", quote(mode(current)))

3. Failure: glmer --------------------------------------------------------------
glFormula(cbind(incidence, size - incidence) ~ period + (1 | herd), data = subset(cbpp, herd == levels(herd)[1]), family = binomial) does not match 'must have > 1'. Actual value: 
Error in checkAtAssignment("numeric", "x", "numeric") : 
  ‘x’ is not a slot in class “numeric”


4. Failure: lmer ---------------------------------------------------------------
VarCorr(fm1)[[1]][1, 1] not equal to 1764.07265427677
Mean relative difference: 2.302304e-05

5. Failure: lmer ---------------------------------------------------------------
VarCorr(fm2)[[1]][1, 1] not equal to expected
Mean absolute difference: 9.935674

6. Failure: lmer ---------------------------------------------------------------
getME(fm2, "theta") not equal to expected
Mean absolute difference: 0.8483203

7. Failure: lmer ---------------------------------------------------------------
theta <- getME(fm1, "theta") not equal to expected
Mean relative difference: 1.151159e-05

8. Failure: lmer ---------------------------------------------------------------
as(Lambdat, "matrix") not equal to expected
Mean relative difference: 0.1128579

9. Error: lmer -----------------------------------------------------------------
undefined columns selected
1: expect_that(fm3 <- lmer(Reaction ~ Days + (1 | Subject) + (0 + Days | Subject), sleepstudy), is_a("lmerMod"))
2: condition(object)
3: str_c(class(x), collapse = ", ")
4: Filter(function(x) length(x) > 0, list(...))
5: unlist(lapply(x, f))
6: lapply(x, f)
7: lmer(Reaction ~ Days + (1 | Subject) + (0 + Days | Subject), sleepstudy)
8: eval(mc, parent.frame(1L))
9: eval(expr, envir, enclos)
10: lme4::lFormula(formula = Reaction ~ Days + (1 | Subject) + (0 + Days | Subject), data = sleepstudy, control = structure(list(optimizer = "Nelder_Mead", restart_edge = TRUE, checkControl = structure(list(check.nobs.vs.rankZ = "stopSmall", check.numlev.gtreq.5 = "warning", check.numlev.gtr.1 = "stop"), .Names = c("check.nobs.vs.rankZ", "check.numlev.gtreq.5", "check.numlev.gtr.1")), optControl = list()), .Names = c("optimizer", "restart_edge", "checkControl", "optControl"), class = c("lmerControl", 
   "merControl")))
11: checkNlevels(reTrms$flist[!reTrms$special], n = n, control)
12: unlist(lapply(flist, function(x) nlevels(droplevels(x))))
13: lapply(flist, function(x) nlevels(droplevels(x)))
14: reTrms$flist[!reTrms$special]
15: `[.data.frame`(reTrms$flist, !reTrms$special)
16: stop("undefined columns selected")
17: .handleSimpleError(function (e) 
   {
    e$calls <- head(sys.calls()[-seq_len(frame + 7)], -2)
    signalCondition(e)
}, "undefined columns selected", quote(`[.data.frame`(reTrms$flist, !reTrms$special)))

a. Error: RZX is being calculated properly -------------------------------------
unique() applies only to vectors
1: glmer(fr, data = randdata00, family = binomial)
2: eval(mc, parent.frame(1L))
3: eval(expr, envir, enclos)
4: lme4::glFormula(formula = fr, data = randdata00, family = binomial)
5: mkReTrms(findbars(formula[[3]]), fr)
6: lapply(bars, mkReTrm, fr = fr)
7: FUN(X[[1L]], ...)
8: getGrouping(bar, fr)
9: eval(substitute(factor(fac), list(fac = bar[[3]])), frloc)
10: eval(expr, envir, enclos)
11: factor(~plot)
12: unique(x, nmax = nmax)
13: unique.default(x, nmax = nmax)
14: .handleSimpleError(function (e) 
   {
    e$calls <- head(sys.calls()[-seq_len(frame + 7)], -2)
    signalCondition(e)
}, "unique() applies only to vectors", quote(unique.default(x, nmax = nmax)))

b. Error: nlmerRank ------------------------------------------------------------
Lambdax size mismatch
1: nlmer(y ~ fModf(a, b) ~ a | r, d, start = c(a = 1, b = 1))
2: devfun(rho$pp$theta)
3: stop(structure(list(message = "Lambdax size mismatch", call = NULL, cppstack = NULL), .Names = c("message", "call", "cppstack"), class = c("std::invalid_argument", "C++Error", "error", "condition")))

c. Error: lmer -----------------------------------------------------------------
unused argument (maxfun = 50)
1: lmerControl(maxfun = 50)
2: .handleSimpleError(function (e) 
   {
    e$calls <- head(sys.calls()[-seq_len(frame + 7)], -2)
    signalCondition(e)
}, "unused argument (maxfun = 50)", quote(lmerControl(maxfun = 50)))

d. Error: glmer ----------------------------------------------------------------
unused argument (maxfun = 50)
1: glmerControl(maxfun = 50)
2: .handleSimpleError(function (e) 
   {
    e$calls <- head(sys.calls()[-seq_len(frame + 7)], -2)
    signalCondition(e)
}, "unused argument (maxfun = 50)", quote(glmerControl(maxfun = 50)))
Error: Test failures
Execution halted
