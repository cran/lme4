
R Under development (unstable) (2013-08-27 r63742) -- "Unsuffered Consequences"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: i686-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(lme4)
Loading required package: lattice
Loading required package: Matrix
> #### tests of getME()
> 
> ###  are names correct? --------------
> if(getRversion() < "2.15")
+     paste0 <- function(...) paste(..., sep = '')
> hasInms <- function(x) grepl("(Intercept", names(x), fixed=TRUE)
> matchNms <- function(fm, PAR) {
+     stopifnot(is.character(vnms <- names(fm@cnms)))
+     mapply(grepl, paste0("^", vnms), names(PAR))
+ }
> chkIMod <- function(fm) {## check "intercept only" model
+     b1 <- getME(fm,"beta")
+     f1 <- fixef(fm)
+     stopifnot(hasInms(f1), f1 == b1,
+               hasInms(t1 <- getME(fm,"theta")), matchNms(fm, t1))
+ }
> 
> fm1 <- lmer(diameter ~ (1|plate) + (1|sample), Penicillin)
> chkIMod(fm1)
> 
> fm2 <- lmer(angle ~ recipe * temperature + (1|recipe:replicate), cake)
> stopifnot(fixef(fm2) == getME(fm2,"beta"))
> getME(fm2,"theta")
recipe:replicate.(Intercept) 
                      1.4296 
> 
> getME(fm3 <- lmer(Reaction ~ Days + (Days|Subject), sleepstudy),
+       "theta")
     Subject.(Intercept) Subject.Days.(Intercept)             Subject.Days 
              0.96673962               0.01516921               0.23091010 
> getME(fm4 <- lmer(Reaction ~ Days + (1|Subject) + (0+Days|Subject), sleepstudy),
+       "theta")
Subject.(Intercept)        Subject.Days 
          0.9799062           0.2342310 
> 
> ## internal consistency check ensuring that all allowed 'name's work (and are not empty):
> (nmME <- eval(formals(getME)$name))
 [1] "X"       "Z"       "Zt"      "Ztlist"  "y"       "mu"      "u"      
 [8] "b"       "Gp"      "Tp"      "L"       "Lambda"  "Lambdat" "Lind"   
[15] "A"       "RX"      "RZX"     "sigma"   "flist"   "beta"    "theta"  
[22] "ST"      "REML"    "is_REML" "n_rtrms" "n_rfacs" "cnms"    "devcomp"
[29] "offset"  "lower"  
> chkMEs <- function(fm, nms) {
+     stopifnot(is.character(nms))
+     str(parts <- sapply(nms, getME, object = fm, simplify=FALSE))
+     isN <- sapply(parts, is.null)
+     stopifnot(identical(names(isN), nms), !any(isN))
+ }
> 
> chkMEs(fm1, nmME)
List of 30
 $ X      : num [1:144, 1] 1 1 1 1 1 1 1 1 1 1 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:144] "1" "2" "3" "4" ...
  .. ..$ : chr "(Intercept)"
  ..- attr(*, "assign")= int 0
 $ Z      :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:288] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ p       : int [1:31] 0 6 12 18 24 30 36 42 48 54 ...
  .. ..@ Dim     : int [1:2] 144 30
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : chr [1:30] "a" "b" "c" "d" ...
  .. ..@ x       : num [1:288] 1 1 1 1 1 1 1 1 1 1 ...
  .. ..@ factors : list()
 $ Zt     :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:288] 0 24 0 25 0 26 0 27 0 28 ...
  .. ..@ p       : int [1:145] 0 2 4 6 8 10 12 14 16 18 ...
  .. ..@ Dim     : int [1:2] 30 144
  .. ..@ Dimnames:List of 2
  .. .. ..$ : chr [1:30] "a" "b" "c" "d" ...
  .. .. ..$ : NULL
  .. ..@ x       : num [1:288] 1 1 1 1 1 1 1 1 1 1 ...
  .. ..@ factors : list()
 $ Ztlist :List of 2
  ..$ plate.(Intercept) :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. ..@ i       : int [1:144] 0 0 0 0 0 0 1 1 1 1 ...
  .. .. ..@ p       : int [1:145] 0 1 2 3 4 5 6 7 8 9 ...
  .. .. ..@ Dim     : int [1:2] 24 144
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : chr [1:24] "a" "b" "c" "d" ...
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:144] 1 1 1 1 1 1 1 1 1 1 ...
  .. .. ..@ factors : list()
  ..$ sample.(Intercept):Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. ..@ i       : int [1:144] 0 1 2 3 4 5 0 1 2 3 ...
  .. .. ..@ p       : int [1:145] 0 1 2 3 4 5 6 7 8 9 ...
  .. .. ..@ Dim     : int [1:2] 6 144
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : chr [1:6] "A" "B" "C" "D" ...
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:144] 1 1 1 1 1 1 1 1 1 1 ...
  .. .. ..@ factors : list()
 $ y      : num [1:144] 27 23 26 23 23 21 27 23 26 23 ...
 $ mu     : num [1:144] 26 22.8 25.7 23.7 23.8 ...
 $ u      : num [1:30] 0.5225 0.5225 0.118 0.2191 0.0169 ...
 $ b      :Formal class 'dgeMatrix' [package "Matrix"] with 4 slots
  .. ..@ x       : num [1:30] 0.805 0.805 0.182 0.337 0.026 ...
  .. ..@ Dim     : int [1:2] 30 1
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : NULL
  .. ..@ factors : list()
 $ Gp     : int [1:3] 0 24 30
 $ Tp     : Named num [1:3] 0 1 2
  ..- attr(*, "names")= chr [1:3] "beg__" "plate" "sample"
 $ L      :Formal class 'dCHMsimpl' [package "Matrix"] with 10 slots
  .. ..@ x       : num [1:189] 3.9 1.39 1.39 1.39 1.39 ...
  .. ..@ p       : int [1:31] 0 7 14 21 28 35 42 49 56 63 ...
  .. ..@ i       : int [1:189] 0 24 25 26 27 28 29 1 24 25 ...
  .. ..@ nz      : int [1:30] 7 7 7 7 7 7 7 7 7 7 ...
  .. ..@ nxt     : int [1:32] 1 2 3 4 5 6 7 8 9 10 ...
  .. ..@ prv     : int [1:32] 31 0 1 2 3 4 5 6 7 8 ...
  .. ..@ colcount: int [1:30] 7 7 7 7 7 7 7 7 7 7 ...
  .. ..@ perm    : int [1:30] 23 22 21 20 19 18 17 16 15 14 ...
  .. ..@ type    : int [1:4] 2 1 0 1
  .. ..@ Dim     : int [1:2] 30 30
 $ Lambda :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:30] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ p       : int [1:31] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ Dim     : int [1:2] 30 30
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : NULL
  .. ..@ x       : num [1:30] 1.54 1.54 1.54 1.54 1.54 ...
  .. ..@ factors : list()
 $ Lambdat:Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:30] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ p       : int [1:31] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ Dim     : int [1:2] 30 30
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : NULL
  .. ..@ x       : num [1:30] 1.54 1.54 1.54 1.54 1.54 ...
  .. ..@ factors : list()
 $ Lind   : int [1:30] 1 1 1 1 1 1 1 1 1 1 ...
 $ A      :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:288] 0 24 0 25 0 26 0 27 0 28 ...
  .. ..@ p       : int [1:145] 0 2 4 6 8 10 12 14 16 18 ...
  .. ..@ Dim     : int [1:2] 30 144
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : NULL
  .. ..@ x       : num [1:288] 1.54 3.51 1.54 3.51 1.54 ...
  .. ..@ factors : list()
 $ RX     : num [1, 1] 0.68
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr "(Intercept)"
  .. ..$ : chr "(Intercept)"
 $ RZX    : num [1:30, 1] 2.37 2.37 2.37 2.37 2.37 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr "(Intercept)"
 $ sigma  : num 0.55
 $ flist  :List of 2
  ..$ plate : Factor w/ 24 levels "a","b","c","d",..: 1 1 1 1 1 1 2 2 2 2 ...
  ..$ sample: Factor w/ 6 levels "A","B","C","D",..: 1 2 3 4 5 6 1 2 3 4 ...
  ..- attr(*, "assign")= int [1:2] 1 2
 $ beta   : num 23
 $ theta  : Named num [1:2] 1.54 3.51
  ..- attr(*, "names")= chr [1:2] "plate.(Intercept)" "sample.(Intercept)"
 $ ST     :List of 2
  ..$ plate : num [1, 1] 1.54
  ..$ sample: num [1, 1] 3.51
 $ REML   : Named int 1
  ..- attr(*, "names")= chr "REML"
 $ is_REML: logi TRUE
 $ n_rtrms: int 2
 $ n_rfacs: int 2
 $ cnms   :List of 2
  ..$ plate : chr "(Intercept)"
  ..$ sample: chr "(Intercept)"
 $ devcomp:List of 2
  ..$ cmp : Named num [1:10] 96.836 -0.771 35.24 8.006 43.245 ...
  .. ..- attr(*, "names")= chr [1:10] "ldL2" "ldRX2" "wrss" "ussq" ...
  ..$ dims: Named int [1:12] 144 144 1 143 2 30 1 2 0 1 ...
  .. ..- attr(*, "names")= chr [1:12] "N" "n" "p" "nmp" ...
 $ offset : num [1:144] 0 0 0 0 0 0 0 0 0 0 ...
 $ lower  : num [1:2] 0 0
> chkMEs(fm2, nmME)
List of 30
 $ X      : num [1:270, 1:18] 1 1 1 1 1 1 1 1 1 1 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:270] "1" "2" "3" "4" ...
  .. ..$ : chr [1:18] "(Intercept)" "recipeB" "recipeC" "temperature.L" ...
  ..- attr(*, "assign")= int [1:18] 0 1 1 2 2 2 2 2 3 3 ...
  ..- attr(*, "contrasts")=List of 2
  .. ..$ recipe     : chr "contr.treatment"
  .. ..$ temperature: chr "contr.poly"
 $ Z      :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:270] 0 1 2 3 4 5 18 19 20 21 ...
  .. ..@ p       : int [1:46] 0 6 12 18 24 30 36 42 48 54 ...
  .. ..@ Dim     : int [1:2] 270 45
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : chr [1:45] "A:1" "A:2" "A:3" "A:4" ...
  .. ..@ x       : num [1:270] 1 1 1 1 1 1 1 1 1 1 ...
  .. ..@ factors : list()
 $ Zt     :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:270] 0 0 0 0 0 0 15 15 15 15 ...
  .. ..@ p       : int [1:271] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ Dim     : int [1:2] 45 270
  .. ..@ Dimnames:List of 2
  .. .. ..$ : chr [1:45] "A:1" "A:2" "A:3" "A:4" ...
  .. .. ..$ : NULL
  .. ..@ x       : num [1:270] 1 1 1 1 1 1 1 1 1 1 ...
  .. ..@ factors : list()
 $ Ztlist :List of 1
  ..$ recipe:replicate.(Intercept):Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. ..@ i       : int [1:270] 0 0 0 0 0 0 15 15 15 15 ...
  .. .. ..@ p       : int [1:271] 0 1 2 3 4 5 6 7 8 9 ...
  .. .. ..@ Dim     : int [1:2] 45 270
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : chr [1:45] "A:1" "A:2" "A:3" "A:4" ...
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:270] 1 1 1 1 1 1 1 1 1 1 ...
  .. .. ..@ factors : list()
 $ y      : num [1:270] 42 46 47 39 53 42 39 46 51 49 ...
 $ mu     : num [1:270] 40 42.4 41.6 44.4 49.5 ...
 $ u      : num [1:45] 7.57 6.6 3.8 -1.8 1.65 ...
 $ b      :Formal class 'dgeMatrix' [package "Matrix"] with 4 slots
  .. ..@ x       : num [1:45] 10.83 9.44 5.43 -2.58 2.35 ...
  .. ..@ Dim     : int [1:2] 45 1
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : NULL
  .. ..@ factors : list()
 $ Gp     : int [1:2] 0 45
 $ Tp     : Named num [1:2] 0 1
  ..- attr(*, "names")= chr [1:2] "beg__" "recipe:replicate"
 $ L      :Formal class 'dCHMsimpl' [package "Matrix"] with 10 slots
  .. ..@ x       : num [1:45] 3.64 3.64 3.64 3.64 3.64 ...
  .. ..@ p       : int [1:46] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ i       : int [1:45] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ nz      : int [1:45] 1 1 1 1 1 1 1 1 1 1 ...
  .. ..@ nxt     : int [1:47] 1 2 3 4 5 6 7 8 9 10 ...
  .. ..@ prv     : int [1:47] 46 0 1 2 3 4 5 6 7 8 ...
  .. ..@ colcount: int [1:45] 1 1 1 1 1 1 1 1 1 1 ...
  .. ..@ perm    : int [1:45] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ type    : int [1:4] 2 1 0 1
  .. ..@ Dim     : int [1:2] 45 45
 $ Lambda :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:45] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ p       : int [1:46] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ Dim     : int [1:2] 45 45
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : NULL
  .. ..@ x       : num [1:45] 1.43 1.43 1.43 1.43 1.43 ...
  .. ..@ factors : list()
 $ Lambdat:Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:45] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ p       : int [1:46] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ Dim     : int [1:2] 45 45
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : NULL
  .. ..@ x       : num [1:45] 1.43 1.43 1.43 1.43 1.43 ...
  .. ..@ factors : list()
 $ Lind   : int [1:45] 1 1 1 1 1 1 1 1 1 1 ...
 $ A      :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:270] 0 0 0 0 0 0 15 15 15 15 ...
  .. ..@ p       : int [1:271] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ Dim     : int [1:2] 45 270
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : NULL
  .. ..@ x       : num [1:270] 1.43 1.43 1.43 1.43 1.43 ...
  .. ..@ factors : list()
 $ RX     : num [1:18, 1:18] 4.51 0 0 0 0 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:18] "(Intercept)" "recipeB" "recipeC" "temperature.L" ...
  .. ..$ : chr [1:18] "(Intercept)" "recipeB" "recipeC" "temperature.L" ...
 $ RZX    : num [1:45, 1:18] 2.36 2.36 2.36 2.36 2.36 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:18] "(Intercept)" "recipeB" "recipeC" "temperature.L" ...
 $ sigma  : num 4.52
 $ flist  :List of 1
  ..$ recipe:replicate: Factor w/ 45 levels "A:1","A:2","A:3",..: 1 1 1 1 1 1 16 16 16 16 ...
  ..- attr(*, "assign")= int 1
 $ beta   : num [1:18] 33.122 -1.478 -1.522 6.43 -0.713 ...
 $ theta  : Named num 1.43
  ..- attr(*, "names")= chr "recipe:replicate.(Intercept)"
 $ ST     :List of 1
  ..$ recipe:replicate: num [1, 1] 1.43
 $ REML   : Named int 18
  ..- attr(*, "names")= chr "REML"
 $ is_REML: logi TRUE
 $ n_rtrms: int 1
 $ n_rfacs: int 1
 $ cnms   :List of 1
  ..$ recipe:replicate: chr "(Intercept)"
 $ devcomp:List of 2
  ..$ cmp : Named num [1:10] 116.3 46.4 4363.7 794.9 5158.7 ...
  .. ..- attr(*, "names")= chr [1:10] "ldL2" "ldRX2" "wrss" "ussq" ...
  ..$ dims: Named int [1:12] 270 270 18 252 1 45 1 1 0 18 ...
  .. ..- attr(*, "names")= chr [1:12] "N" "n" "p" "nmp" ...
 $ offset : num [1:270] 0 0 0 0 0 0 0 0 0 0 ...
 $ lower  : num 0
> chkMEs(fm3, nmME)
List of 30
 $ X      : num [1:180, 1:2] 1 1 1 1 1 1 1 1 1 1 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:180] "1" "2" "3" "4" ...
  .. ..$ : chr [1:2] "(Intercept)" "Days"
  ..- attr(*, "assign")= int [1:2] 0 1
 $ Z      :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:342] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ p       : int [1:37] 0 10 19 29 38 48 57 67 76 86 ...
  .. ..@ Dim     : int [1:2] 180 36
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : chr [1:36] "308" "308" "309" "309" ...
  .. ..@ x       : num [1:342] 1 1 1 1 1 1 1 1 1 1 ...
  .. ..@ factors : list()
 $ Zt     :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:342] 0 0 1 0 1 0 1 0 1 0 ...
  .. ..@ p       : int [1:181] 0 1 3 5 7 9 11 13 15 17 ...
  .. ..@ Dim     : int [1:2] 36 180
  .. ..@ Dimnames:List of 2
  .. .. ..$ : chr [1:36] "308" "308" "309" "309" ...
  .. .. ..$ : NULL
  .. ..@ x       : num [1:342] 1 1 1 1 2 1 3 1 4 1 ...
  .. ..@ factors : list()
 $ Ztlist :List of 2
  ..$ Subject.(Intercept):Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. ..@ i       : int [1:180] 0 0 0 0 0 0 0 0 0 0 ...
  .. .. ..@ p       : int [1:181] 0 1 2 3 4 5 6 7 8 9 ...
  .. .. ..@ Dim     : int [1:2] 18 180
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : chr [1:18] "308" "309" "310" "330" ...
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:180] 1 1 1 1 1 1 1 1 1 1 ...
  .. .. ..@ factors : list()
  ..$ Subject.Days       :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. ..@ i       : int [1:162] 0 0 0 0 0 0 0 0 0 1 ...
  .. .. ..@ p       : int [1:181] 0 0 1 2 3 4 5 6 7 8 ...
  .. .. ..@ Dim     : int [1:2] 18 180
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : chr [1:18] "308" "309" "310" "330" ...
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:162] 1 2 3 4 5 6 7 8 9 1 ...
  .. .. ..@ factors : list()
 $ y      : num [1:180] 250 259 251 321 357 ...
 $ mu     : num [1:180] 254 273 293 313 332 ...
 $ u      : num [1:36] 2.34 39.68 -41.79 -34.58 -40.3 ...
 $ b      :Formal class 'dgeMatrix' [package "Matrix"] with 4 slots
  .. ..@ x       : num [1:36] 2.26 9.2 -40.4 -8.62 -38.96 ...
  .. ..@ Dim     : int [1:2] 36 1
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : NULL
  .. ..@ factors : list()
 $ Gp     : int [1:2] 0 36
 $ Tp     : Named num [1:2] 0 3
  ..- attr(*, "names")= chr [1:2] "beg__" "Subject"
 $ L      :Formal class 'dCHMsimpl' [package "Matrix"] with 10 slots
  .. ..@ x       : num [1:54] 3.43 3.22 2.41 3.43 3.22 ...
  .. ..@ p       : int [1:37] 0 2 3 5 6 8 9 11 12 14 ...
  .. ..@ i       : int [1:54] 0 1 1 2 3 3 4 5 5 6 ...
  .. ..@ nz      : int [1:36] 2 1 2 1 2 1 2 1 2 1 ...
  .. ..@ nxt     : int [1:38] 1 2 3 4 5 6 7 8 9 10 ...
  .. ..@ prv     : int [1:38] 37 0 1 2 3 4 5 6 7 8 ...
  .. ..@ colcount: int [1:36] 2 1 2 1 2 1 2 1 2 1 ...
  .. ..@ perm    : int [1:36] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ type    : int [1:4] 2 1 0 1
  .. ..@ Dim     : int [1:2] 36 36
 $ Lambda :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:54] 0 1 1 2 3 3 4 5 5 6 ...
  .. ..@ p       : int [1:37] 0 2 3 5 6 8 9 11 12 14 ...
  .. ..@ Dim     : int [1:2] 36 36
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : NULL
  .. ..@ x       : num [1:54] 0.9667 0.0152 0.2309 0.9667 0.0152 ...
  .. ..@ factors : list()
 $ Lambdat:Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:54] 0 0 1 2 2 3 4 4 5 6 ...
  .. ..@ p       : int [1:37] 0 1 3 4 6 7 9 10 12 13 ...
  .. ..@ Dim     : int [1:2] 36 36
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : NULL
  .. ..@ x       : num [1:54] 0.9667 0.0152 0.2309 0.9667 0.0152 ...
  .. ..@ factors : list()
 $ Lind   : int [1:54] 1 2 3 1 2 3 1 2 3 1 ...
 $ A      :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:342] 0 0 1 0 1 0 1 0 1 0 ...
  .. ..@ p       : int [1:181] 0 1 3 5 7 9 11 13 15 17 ...
  .. ..@ Dim     : int [1:2] 36 180
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : NULL
  .. ..@ x       : num [1:342] 0.967 0.982 0.231 0.997 0.462 ...
  .. ..@ factors : list()
 $ RX     : num [1:2, 1:2] 3.79 0 2.3 16.56
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:2] "(Intercept)" "Days"
  .. ..$ : chr [1:2] "(Intercept)" "Days"
 $ RZX    : num [1:36, 1:2] 3.022 0.269 3.022 0.269 3.022 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:2] "(Intercept)" "Days"
 $ sigma  : num 25.6
 $ flist  :List of 1
  ..$ Subject: Factor w/ 18 levels "308","309","310",..: 1 1 1 1 1 1 1 1 1 1 ...
  ..- attr(*, "assign")= int 1
 $ beta   : num [1:2] 251.4 10.5
 $ theta  : Named num [1:3] 0.9667 0.0152 0.2309
  ..- attr(*, "names")= chr [1:3] "Subject.(Intercept)" "Subject.Days.(Intercept)" "Subject.Days"
 $ ST     :List of 1
  ..$ Subject: num [1:2, 1:2] 0.9667 0.0157 0 0.2309
 $ REML   : Named int 2
  ..- attr(*, "names")= chr "REML"
 $ is_REML: logi TRUE
 $ n_rtrms: int 1
 $ n_rfacs: int 1
 $ cnms   :List of 1
  ..$ Subject: chr [1:2] "(Intercept)" "Days"
 $ devcomp:List of 2
  ..$ cmp : Named num [1:10] 7.60e+01 8.28 9.89e+04 1.77e+04 1.17e+05 ...
  .. ..- attr(*, "names")= chr [1:10] "ldL2" "ldRX2" "wrss" "ussq" ...
  ..$ dims: Named int [1:12] 180 180 2 178 3 36 1 1 0 2 ...
  .. ..- attr(*, "names")= chr [1:12] "N" "n" "p" "nmp" ...
 $ offset : num [1:180] 0 0 0 0 0 0 0 0 0 0 ...
 $ lower  : num [1:3] 0 -Inf 0
> chkMEs(fm4, nmME)
List of 30
 $ X      : num [1:180, 1:2] 1 1 1 1 1 1 1 1 1 1 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:180] "1" "2" "3" "4" ...
  .. ..$ : chr [1:2] "(Intercept)" "Days"
  ..- attr(*, "assign")= int [1:2] 0 1
 $ Z      :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:342] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ p       : int [1:37] 0 10 20 30 40 50 60 70 80 90 ...
  .. ..@ Dim     : int [1:2] 180 36
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : chr [1:36] "308" "309" "310" "330" ...
  .. ..@ x       : num [1:342] 1 1 1 1 1 1 1 1 1 1 ...
  .. ..@ factors : list()
 $ Zt     :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:342] 0 0 18 0 18 0 18 0 18 0 ...
  .. ..@ p       : int [1:181] 0 1 3 5 7 9 11 13 15 17 ...
  .. ..@ Dim     : int [1:2] 36 180
  .. ..@ Dimnames:List of 2
  .. .. ..$ : chr [1:36] "308" "309" "310" "330" ...
  .. .. ..$ : NULL
  .. ..@ x       : num [1:342] 1 1 1 1 2 1 3 1 4 1 ...
  .. ..@ factors : list()
 $ Ztlist :List of 2
  ..$ Subject.(Intercept):Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. ..@ i       : int [1:180] 0 0 0 0 0 0 0 0 0 0 ...
  .. .. ..@ p       : int [1:181] 0 1 2 3 4 5 6 7 8 9 ...
  .. .. ..@ Dim     : int [1:2] 18 180
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : chr [1:18] "308" "309" "310" "330" ...
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:180] 1 1 1 1 1 1 1 1 1 1 ...
  .. .. ..@ factors : list()
  ..$ Subject.Days       :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. ..@ i       : int [1:162] 0 0 0 0 0 0 0 0 0 1 ...
  .. .. ..@ p       : int [1:181] 0 0 1 2 3 4 5 6 7 8 ...
  .. .. ..@ Dim     : int [1:2] 18 180
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : chr [1:18] "308" "309" "310" "330" ...
  .. .. .. ..$ : NULL
  .. .. ..@ x       : num [1:162] 1 2 3 4 5 6 7 8 9 1 ...
  .. .. ..@ factors : list()
 $ y      : num [1:180] 250 259 251 321 357 ...
 $ mu     : num [1:180] 253 273 292 312 332 ...
 $ u      : num [1:36] 1.54 -41.2 -39.98 25.02 23.38 ...
 $ b      :Formal class 'dgeMatrix' [package "Matrix"] with 4 slots
  .. ..@ x       : num [1:36] 1.51 -40.37 -39.18 24.52 22.91 ...
  .. ..@ Dim     : int [1:2] 36 1
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : NULL
  .. ..@ factors : list()
 $ Gp     : int [1:3] 0 18 36
 $ Tp     : Named num [1:3] 0 1 2
  ..- attr(*, "names")= chr [1:3] "beg__" "Subject" "Subject"
 $ L      :Formal class 'dCHMsimpl' [package "Matrix"] with 10 slots
  .. ..@ x       : num [1:54] 3.26 3.17 2.56 3.26 3.17 ...
  .. ..@ p       : int [1:37] 0 2 3 5 6 8 9 11 12 14 ...
  .. ..@ i       : int [1:54] 0 1 1 2 3 3 4 5 5 6 ...
  .. ..@ nz      : int [1:36] 2 1 2 1 2 1 2 1 2 1 ...
  .. ..@ nxt     : int [1:38] 1 2 3 4 5 6 7 8 9 10 ...
  .. ..@ prv     : int [1:38] 37 0 1 2 3 4 5 6 7 8 ...
  .. ..@ colcount: int [1:36] 2 1 2 1 2 1 2 1 2 1 ...
  .. ..@ perm    : int [1:36] 0 18 1 19 2 20 3 21 4 22 ...
  .. ..@ type    : int [1:4] 2 1 0 1
  .. ..@ Dim     : int [1:2] 36 36
 $ Lambda :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:36] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ p       : int [1:37] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ Dim     : int [1:2] 36 36
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : NULL
  .. ..@ x       : num [1:36] 0.98 0.98 0.98 0.98 0.98 ...
  .. ..@ factors : list()
 $ Lambdat:Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:36] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ p       : int [1:37] 0 1 2 3 4 5 6 7 8 9 ...
  .. ..@ Dim     : int [1:2] 36 36
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : NULL
  .. ..@ x       : num [1:36] 0.98 0.98 0.98 0.98 0.98 ...
  .. ..@ factors : list()
 $ Lind   : int [1:36] 1 1 1 1 1 1 1 1 1 1 ...
 $ A      :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. ..@ i       : int [1:342] 0 0 18 0 18 0 18 0 18 0 ...
  .. ..@ p       : int [1:181] 0 1 3 5 7 9 11 13 15 17 ...
  .. ..@ Dim     : int [1:2] 36 180
  .. ..@ Dimnames:List of 2
  .. .. ..$ : NULL
  .. .. ..$ : NULL
  .. ..@ x       : num [1:342] 0.98 0.98 0.234 0.98 0.468 ...
  .. ..@ factors : list()
 $ RX     : num [1:2, 1:2] 3.78 0 3.08 16.39
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : chr [1:2] "(Intercept)" "Days"
  .. ..$ : chr [1:2] "(Intercept)" "Days"
 $ RZX    : num [1:36, 1:2] 3.009 0.388 3.009 0.388 3.009 ...
  ..- attr(*, "dimnames")=List of 2
  .. ..$ : NULL
  .. ..$ : chr [1:2] "(Intercept)" "Days"
 $ sigma  : num 25.6
 $ flist  :List of 1
  ..$ Subject: Factor w/ 18 levels "308","309","310",..: 1 1 1 1 1 1 1 1 1 1 ...
  ..- attr(*, "assign")= int [1:2] 1 1
 $ beta   : num [1:2] 251.4 10.5
 $ theta  : Named num [1:2] 0.98 0.234
  ..- attr(*, "names")= chr [1:2] "Subject.(Intercept)" "Subject.Days"
 $ ST     :List of 2
  ..$ Subject: num [1, 1] 0.98
  ..$ Subject: num [1, 1] 0.234
 $ REML   : Named int 2
  ..- attr(*, "names")= chr "REML"
 $ is_REML: logi TRUE
 $ n_rtrms: int 2
 $ n_rfacs: int 1
 $ cnms   :List of 2
  ..$ Subject: chr "(Intercept)"
  ..$ Subject: chr "Days"
 $ devcomp:List of 2
  ..$ cmp : Named num [1:10] 7.64e+01 8.25 9.85e+04 1.79e+04 1.16e+05 ...
  .. ..- attr(*, "names")= chr [1:10] "ldL2" "ldRX2" "wrss" "ussq" ...
  ..$ dims: Named int [1:12] 180 180 2 178 2 36 1 2 0 2 ...
  .. ..- attr(*, "names")= chr [1:12] "N" "n" "p" "nmp" ...
 $ offset : num [1:180] 0 0 0 0 0 0 0 0 0 0 ...
 $ lower  : num [1:2] 0 0
> 
> ## multiple components can now be retrieved at once
> gg <- getME(fm2,c("theta","beta"))
> gg2 <- getME(fm2,c("theta","beta","X"))
> 
> ## list of Zt for each random-effects factor
> lapply(getME(fm2,c("Ztlist")),dim)
$`recipe:replicate.(Intercept)`
[1]  45 270

> ## Cholesky factors returned as a list of matrices
> getME(fm1,"ST")
$plate
         [,1]
[1,] 1.539676

$sample
         [,1]
[1,] 3.512414

> getME(fm2,"ST")
$`recipe:replicate`
       [,1]
[1,] 1.4296

> 
> ## distinction between number of RE terms
> ##  and number of RE grouping factors
> stopifnot(getME(fm2,"n_rtrms")==1)
> stopifnot(getME(fm2,"n_rfacs")==1)
> 
> lapply(getME(fm4,c("Ztlist")),dim)
$`Subject.(Intercept)`
[1]  18 180

$Subject.Days
[1]  18 180

> stopifnot(getME(fm4,"n_rtrms")==2)
> stopifnot(getME(fm4,"n_rfacs")==1)
> 
> stopifnot(getME(fm1,"sigma")==sigma(fm1))
> 
> proc.time()
   user  system elapsed 
  3.864   2.568  13.620 
