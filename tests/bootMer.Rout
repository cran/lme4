
R Under development (unstable) (2013-08-18 r63609) -- "Unsuffered Consequences"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: i686-pc-linux-gnu (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(lme4)
Loading required package: lattice
Loading required package: Matrix
> library(testthat)
> (testLevel <- if (nzchar(s <- Sys.getenv("LME4_TEST_LEVEL"))) as.numeric(s) else 1)
[1] 4
> mySumm <- function(.) { s <- sigma(.)
+                         c(beta =getME(., "beta"),
+                           sigma = s, sig01 = unname(s * getME(., "theta"))) }
> fm1 <- lmer(Yield ~ 1|Batch, Dyestuff)
> boo01 <- bootMer(fm1, mySumm, nsim = 10)
> boo02 <- bootMer(fm1, mySumm, nsim = 10, use.u = TRUE)
> 
> ## boo02 <- bootMer(fm1, mySumm, nsim = 500, use.u = TRUE)
> if (require(boot)) {
+     boot.ci(boo02,index=2,type="perc")
+ }
Loading required package: boot

Attaching package: ‘boot’

The following object is masked from ‘package:lattice’:

    melanoma

BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS
Based on 10 bootstrap replicates

CALL : 
boot.ci(boot.out = boo02, type = "perc", index = 2)

Intervals : 
Level     Percentile     
95%   (40.88, 64.75 )  
Calculations and Intervals on Original Scale
Warning : Percentile Intervals used Extreme Quantiles
Some percentile intervals may be unstable
Warning message:
In norm.inter(t, alpha) : extreme order statistics used as endpoints
> 
> fm2 <- lmer(angle ~ recipe * temperature + (1|recipe:replicate), cake)
> boo03 <- bootMer(fm2, mySumm, nsim = 10)
> boo04 <- bootMer(fm2, mySumm, nsim = 10, use.u = TRUE)
> 
> if (testLevel > 1) {
+     gm1 <- glmer(cbind(incidence, size - incidence) ~ period + (1 | herd),
+                  data = cbpp, family = binomial)
+     boo05 <- bootMer(gm1, mySumm, nsim = 10)
+     boo06 <- bootMer(gm1, mySumm, nsim = 10, use.u = TRUE)
+ 
+     cbpp$obs <- factor(seq(nrow(cbpp)))
+     gm2 <- glmer(cbind(incidence, size - incidence) ~ period +
+                  (1 | herd) +  (1|obs),
+                  family = binomial, data = cbpp)
+     boo03 <- bootMer(gm2, mySumm, nsim = 10)
+     boo04 <- bootMer(gm2, mySumm, nsim = 10, use.u = TRUE)
+ }
> load(system.file("testdata","culcita_dat.RData",package="lme4"))
> cmod <- glmer(predation~ttt+(1|block),family=binomial,data=culcita_dat)
> set.seed(101)
> ## FIXME: sensitive to step-halving PIRLS tests
> ## expect_warning(cc <- confint(cmod,method="boot",nsim=10,quiet=TRUE,
> ##              .progress="txt",PBargs=list(style=3)),"some bootstrap runs failed")
> 
> ## FIXME: how do we make this safe for testing anywhere?
> boo01P <- bootMer(fm1, mySumm, nsim = 10, parallel="multicore", ncpus=2)
> ## FIXME: fails on my machine, but I don't know what I'm doing (BMB)
> ## boo01P.snow <- bootMer(fm1, mySumm, nsim = 10, parallel="snow", ncpus=2)
> 
> proc.time()
   user  system elapsed 
 31.325   3.468  34.734 
